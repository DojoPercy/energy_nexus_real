import { PAYSTACK_CONFIG, PAYSTACK_ENDPOINTS } from './paystack'

// Paystack API service for subscription management
export class PaystackAPI {
  private secretKey: string
  private baseUrl: string

  constructor() {
    this.secretKey = PAYSTACK_CONFIG.secretKey
    this.baseUrl = PAYSTACK_ENDPOINTS.base
  }

  private async makeRequest(endpoint: string, method: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'GET', data?: any) {
    const url = `${this.baseUrl}${endpoint}`
    
    const options: RequestInit = {
      method,
      headers: {
        'Authorization': `Bearer ${this.secretKey}`,
        'Content-Type': 'application/json',
      },
    }

    if (data && method !== 'GET') {
      options.body = JSON.stringify(data)
    }

    try {
      const response = await fetch(url, options)
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(`Paystack API Error: ${errorData.message || response.statusText}`)
      }

      return await response.json()
    } catch (error) {
      console.error('Paystack API request failed:', error)
      throw error
    }
  }

  // Create a subscription plan
  async createPlan(planData: {
    name: string
    interval: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'biannually' | 'annually'
    amount: number // in kobo
    currency: string
    description?: string
  }) {
    return this.makeRequest('/plan', 'POST', planData)
  }

  // Get all plans
  async getPlans() {
    return this.makeRequest('/plan')
  }

  // Get a specific plan
  async getPlan(planId: string) {
    return this.makeRequest(`/plan/${planId}`)
  }

  // Create a customer
  async createCustomer(customerData: {
    email: string
    first_name?: string
    last_name?: string
    phone?: string
  }) {
    return this.makeRequest('/customer', 'POST', customerData)
  }

  // Get customer by email
  async getCustomerByEmail(email: string) {
    return this.makeRequest(`/customer?email=${encodeURIComponent(email)}`)
  }

  // Create a subscription
  async createSubscription(subscriptionData: {
    customer: string // customer code or email
    plan: string // plan code
    authorization?: string // authorization code
  }) {
    return this.makeRequest('/subscription', 'POST', subscriptionData)
  }

  // Get subscription details
  async getSubscription(subscriptionId: string) {
    return this.makeRequest(`/subscription/${subscriptionId}`)
  }

  // Disable subscription
  async disableSubscription(subscriptionId: string) {
    return this.makeRequest(`/subscription/disable`, 'POST', {
      code: subscriptionId,
      token: 'disable_token' // This would be generated by Paystack
    })
  }

  // Enable subscription
  async enableSubscription(subscriptionId: string) {
    return this.makeRequest(`/subscription/enable`, 'POST', {
      code: subscriptionId,
      token: 'enable_token' // This would be generated by Paystack
    })
  }

  // Verify transaction
  async verifyTransaction(reference: string) {
    return this.makeRequest(`/transaction/verify/${reference}`)
  }

  // Initialize transaction
  async initializeTransaction(transactionData: {
    email: string
    amount: number // in kobo
    currency?: string
    reference?: string
    plan?: string
    customer?: string
    authorization?: string
  }) {
    return this.makeRequest('/transaction/initialize', 'POST', transactionData)
  }
}

// Singleton instance
export const paystackAPI = new PaystackAPI()

// Helper functions for Sanity integration
export async function createOrGetCustomer(email: string, userData?: { name?: string; phone?: string }) {
  try {
    // First, try to get existing customer
    const existingCustomers = await paystackAPI.getCustomerByEmail(email)
    
    if (existingCustomers.data && existingCustomers.data.length > 0) {
      return existingCustomers.data[0]
    }

    // Create new customer if not found
    const customerData = {
      email,
      first_name: userData?.name?.split(' ')[0] || '',
      last_name: userData?.name?.split(' ').slice(1).join(' ') || '',
      phone: userData?.phone || '',
    }

    const newCustomer = await paystackAPI.createCustomer(customerData)
    return newCustomer.data
  } catch (error) {
    console.error('Error creating/getting customer:', error)
    throw error
  }
}

export async function createSubscriptionFromPlan(
  customerEmail: string, 
  planCode: string, 
  authorizationCode?: string
) {
  try {
    const customer = await createOrGetCustomer(customerEmail)
    
    const subscriptionData = {
      customer: customer.customer_code,
      plan: planCode,
      ...(authorizationCode && { authorization: authorizationCode })
    }

    const subscription = await paystackAPI.createSubscription(subscriptionData)
    return subscription.data
  } catch (error) {
    console.error('Error creating subscription:', error)
    throw error
  }
}

export async function verifyAndCreateSubscription(
  reference: string,
  planCode: string
) {
  try {
    // Verify the transaction
    const verification = await paystackAPI.verifyTransaction(reference)
    
    if (verification.data.status === 'success') {
      const { customer, authorization } = verification.data
      
      // Create subscription using the authorization
      const subscription = await createSubscriptionFromPlan(
        customer.email,
        planCode,
        authorization.authorization_code
      )
      
      return {
        transaction: verification.data,
        subscription
      }
    } else {
      throw new Error('Transaction verification failed')
    }
  } catch (error) {
    console.error('Error verifying transaction and creating subscription:', error)
    throw error
  }
}
